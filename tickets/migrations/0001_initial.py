# Generated by Django 5.2.1 on 2025-05-21 22:56

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import tickets.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FieldTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='Используется в коде. Только латиница, цифры, подчеркивания.', max_length=100, unique=True, verbose_name='Уникальное имя поля (англ., для системы)')),
                ('label_default', models.CharField(help_text='Как поле будет называться для пользователя, если не переопределено в категории.', max_length=255, verbose_name='Метка поля по умолчанию')),
                ('field_type', models.CharField(choices=[('char', 'Текстовое поле (короткое)'), ('text', 'Текстовое поле (длинное)'), ('email', 'Email'), ('int', 'Целое число'), ('bool', 'Да/Нет (чекбокс)'), ('date', 'Дата'), ('select', 'Выпадающий список')], max_length=20, verbose_name='Тип поля')),
                ('help_text_default', models.CharField(blank=True, max_length=255, null=True, verbose_name='Подсказка для поля по умолчанию')),
                ('select_choices_json_default', models.JSONField(blank=True, help_text='Если тип поля "Выпадающий список". Пример: {"val1": "Опция 1", "val2": "Опция 2"}', null=True, verbose_name='Варианты для выпадающего списка (JSON) по умолчанию')),
                ('is_active', models.BooleanField(default=True, help_text='Если неактивен, его нельзя будет выбрать при настройке полей для категории.', verbose_name='Доступен для добавления в категории')),
            ],
            options={
                'verbose_name': 'Шаблон кастомного поля (Библиотека)',
                'verbose_name_plural': 'Шаблоны кастомных полей (Библиотека)',
                'ordering': ['label_default'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название проекта (отдела)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание проекта')),
                ('project_email', models.EmailField(blank=True, help_text='Если указан, может использоваться для отправки/получения уведомлений по тикетам проекта.', max_length=254, null=True, verbose_name='Email проекта (для уведомлений)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
            ],
            options={
                'verbose_name': 'Проект (отдел)',
                'verbose_name_plural': 'Проекты (отделы)',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TicketPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название приоритета')),
                ('code', models.SlugField(unique=True, verbose_name='Код (для системы)')),
                ('color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Цвет (HEX)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Приоритет тикета',
                'verbose_name_plural': 'Приоритеты тикетов',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TicketStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название статуса')),
                ('code', models.SlugField(unique=True, verbose_name='Код (для системы)')),
                ('color', models.CharField(default='#777777', help_text='Например, #FF0000 для красного.', max_length=7, verbose_name='Цвет статуса (HEX)')),
                ('is_default_status', models.BooleanField(default=False, verbose_name='Статус по умолчанию для новых тикетов')),
                ('is_resolved_status', models.BooleanField(default=False, verbose_name='Этот статус означает, что проблема решена')),
                ('is_closed_status', models.BooleanField(default=False, verbose_name='Этот статус означает, что тикет закрыт (финальный)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
            ],
            options={
                'verbose_name': 'Статус тикета',
                'verbose_name_plural': 'Статусы тикетов',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('agent_role', models.CharField(choices=[('agent', 'Агент'), ('project_manager', 'Руководитель проекта')], default='agent', max_length=20, verbose_name='Роль в системе')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('projects', models.ManyToManyField(blank=True, related_name='agents', to='tickets.project', verbose_name='Проекты')),
            ],
            options={
                'verbose_name': 'Сотрудник поддержки',
                'verbose_name_plural': 'Сотрудники поддержки',
                'ordering': ['username'],
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Тема тикета')),
                ('description', models.TextField(verbose_name='Описание проблемы')),
                ('reporter_name', models.CharField(max_length=255, verbose_name='ФИО заявителя')),
                ('reporter_email', models.EmailField(max_length=254, verbose_name='Email заявителя')),
                ('reporter_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон заявителя')),
                ('reporter_building', models.CharField(blank=True, max_length=100, null=True, verbose_name='Корпус')),
                ('reporter_room', models.CharField(blank=True, max_length=50, null=True, verbose_name='Комната/Кабинет')),
                ('reporter_department', models.CharField(blank=True, max_length=150, null=True, verbose_name='Подразделение')),
                ('ticket_id_display', models.CharField(blank=True, max_length=20, unique=True, verbose_name='ID тикета')),
                ('custom_form_data', models.JSONField(blank=True, default=dict, null=True, verbose_name='Данные дополнительных полей')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата последнего обновления')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата решения')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата закрытия')),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Исполнитель')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tickets.project', verbose_name='Проект (отдел)')),
            ],
            options={
                'verbose_name': 'Тикет',
                'verbose_name_plural': 'Тикеты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name_display', models.CharField(blank=True, max_length=255, verbose_name='Имя автора (для отображения)')),
                ('body', models.TextField(verbose_name='Текст комментария')),
                ('is_internal', models.BooleanField(default=False, verbose_name='Внутренний комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('author_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_comments', to=settings.AUTH_USER_MODEL, verbose_name='Автор (сотрудник)')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tickets.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=tickets.models.ticket_attachment_path, verbose_name='Файл')),
                ('uploaded_by_name_display', models.CharField(blank=True, max_length=255, verbose_name='Загрузил (имя для отображения)')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('uploaded_by_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_attachments', to=settings.AUTH_USER_MODEL, verbose_name='Загрузил (сотрудник)')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tickets.comment', verbose_name='Комментарий')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tickets.ticket', verbose_name='Тикет')),
            ],
            options={
                'verbose_name': 'Вложение',
                'verbose_name_plural': 'Вложения',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название категории')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_categories', to='tickets.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Категория тикета',
                'verbose_name_plural': 'Категории тикетов',
                'ordering': ['project', 'name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='tickets.ticketcategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='priority',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tickets.ticketpriority', verbose_name='Приоритет'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tickets.ticketstatus', verbose_name='Статус'),
        ),
        migrations.CreateModel(
            name='CustomFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_override', models.CharField(blank=True, help_text='Оставьте пустым, чтобы использовать метку из шаблона поля.', max_length=255, null=True, verbose_name='Метка поля (если отличается от шаблона)')),
                ('help_text_override', models.CharField(blank=True, help_text='Оставьте пустым, чтобы использовать подсказку из шаблона поля.', max_length=255, null=True, verbose_name='Подсказка для поля (если отличается от шаблона)')),
                ('is_required_in_category', models.BooleanField(default=False, verbose_name='Обязательное поле (в этой категории)')),
                ('order_in_category', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения (в этой категории)')),
                ('is_active_in_category', models.BooleanField(default=True, help_text='Отображать это поле на форме для данной категории.', verbose_name='Активно (в этой категории)')),
                ('field_template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='category_configurations', to='tickets.fieldtemplate', verbose_name='Шаблон поля из библиотеки')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_form_fields', to='tickets.ticketcategory', verbose_name='Категория тикета')),
            ],
            options={
                'verbose_name': 'Настроенное поле для формы категории',
                'verbose_name_plural': 'Настроенные поля для форм категорий',
                'ordering': ['category', 'order_in_category'],
                'unique_together': {('category', 'field_template')},
            },
        ),
    ]
